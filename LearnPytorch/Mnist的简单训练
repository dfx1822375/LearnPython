import numpy as np
from torch import nn, optim
from torch.autograd import Variable
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import torch

# 训练集
train_dataset = datasets.MNIST(root='./',
                               train=True,
                               transform=transforms.ToTensor(),
                               download=True)
# 测试集
test_dataset = datasets.MNIST(root='./',
                              train=False,
                              transform=transforms.ToTensor(),
                              download=True)
# 批次大小
batch_size = 64
# 装载训练集
train_loader = DataLoader(dataset=train_dataset,
                          batch_size=batch_size,
                          shuffle=True)  # shuffle起到打乱数据集作用
# 装载测试集
test_loader = DataLoader(dataset=test_dataset,
                         batch_size=batch_size,
                         shuffle=True)
for i, data in enumerate(train_loader):  # 观察样本参数维度
    inputs, labels = data
    print(inputs.shape)
    print(labels.shape)
    break


# 定义网络结构


class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.fc1 = nn.Linear(784, 10)
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        # ([64, 1, 28, 28])->(64,784) 全连接层只能计算二维
        x = x.view(x.size()[0], -1)
        x = self.fc1(x)
        x = self.softmax(x)  # 以第一个维度进行softmax计算
        return x


# 定义模型\
LR = 0.5  # 学习率
model = Net()
# 定义代价函数
mse_loss = nn.MSELoss()
# 定义优化器
optimizer = optim.SGD(model.parameters(), LR)


def train():
    for i, data in enumerate(train_loader):
        # 获得一个批次的数据和标签\n",
        inputs, labels = data
        # 获得模型预测结果（64,10）
        out = model(inputs)
        # to onehot,把数据标签变成独热编码
        # (64)-(64,1)
        labels = labels.reshape(-1, 1)
        # tensor.scatter(dim, index, src)
        # dim:对哪个维度进行独热编码
        # index:要将src中对应的值放到tensor的哪个位置。
        # src:插入index的数值
        one_hot = torch.zeros(inputs.shape[0], 10).scatter(1, labels, 1)
        # 计算loss,mes_loss的两个数据的shape要一致
        loss = mse_loss(out, one_hot)
        # 梯度清0
        optimizer.zero_grad()
        # 计算梯度
        loss.backward()
        # 修改权值
        optimizer.step()


def test():
            correct = 0
            for i,data in enumerate(test_loader):
                # 获得一个批次的数据和标签
                inputs, labels = data
                # 获得模型预测结果（64,10）
                out = model(inputs)
                # 获得最大值，以及最大值所在的位置
                _, predicted = torch.max(out, 1)
                # 预测正确的数量
                correct += (predicted == labels).sum()
            print("Test acc:{0}".format(correct.item()/len(test_dataset)))


for epoch in range(10):
    print('epoch:', epoch)
    train()
    test()
    
    
    
    # 交叉熵适合用于分类情况的代价函数
    # 下面为对上述程序进行更换代价函数处理，仅需修改下列几句程序即可
    # 定义代价函数
    mse_loss = nn.CrossEntropyLoss()
    def train():
    for i, data in enumerate(train_loader):
        # 获得一个批次的数据和标签
        inputs, labels = data
        # 获得模型预测结果（64,10）
        out = model(inputs)
        # 交叉熵代价函数out(batch,C), labels(batch)
        loss = mse_loss(out, labels)
        # 梯度清0
        optimizer.zero_grad()
        # 计算梯度
        loss.backward()
        # 修改权值
        optimizer.step()
        
        
        
# 修改程序使用Adam优化器，该优化器较为常见，学习率一般较小     
# 定义模型
LR = 0.001  # 学习率
model = Net()
# 定义代价函数
mse_loss = nn.MSELoss()
# 定义优化器
optimizer = optim.Adam(model.parameters(), LR)  # Adam优化器较为常用，学习率也一般较小
